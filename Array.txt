✅ Mastering Arrays Class in Java – Must-Know Utility Methods for Every Developer
If you’re working with arrays in Java, the Arrays class from java.util is your best friend! 🧠
 It provides powerful utility methods to sort, search, fill, compare, and print arrays easily.
🔍 Here are some essential methods every Java developer should know:

🔹 1. Arrays.toString(array)
📌 Description: Converts the array into a readable string format.
 🧪 Example:
 int[] arr = {1, 2, 3, 4};
 System.out.println(Arrays.toString(arr)); // Output: [1, 2, 3, 4]

🔹 2. Arrays.sort(array)
📌 Description: Sorts the array in ascending order.
 🧪 Example:
 int[] arr = {5, 2, 8, 1};
 Arrays.sort(arr);
 System.out.println(Arrays.toString(arr)); // Output: [1, 2, 5, 8]

🔹 3. Arrays.sort(array, Comparator)
📌 Description: Sorts an object array using custom logic.
 🧪 Example:
 String[] names = {"Zara", "Bob", "Alex"};
 Arrays.sort(names, (a, b) -> b.compareTo(a)); // Descending
 System.out.println(Arrays.toString(names)); // Output: [Zara, Bob, Alex]

🔹 4. Arrays.copyOf(original, newLength)
📌 Description: Copies the original array to a new array of the given length.
 🧪 Example:
 int[] arr = {1, 2, 3};
 int[] copy = Arrays.copyOf(arr, 5);
 System.out.println(Arrays.toString(copy)); // Output: [1, 2, 3, 0, 0]

🔹 5. Arrays.copyOfRange(array, from, to)
📌 Description: Copies a specific range from the array (from inclusive, to exclusive).
 🧪 Example:

 int[] arr = {10, 20, 30, 40, 50};
 int[] sub = Arrays.copyOfRange(arr, 1, 4);
 System.out.println(Arrays.toString(sub)); // Output: [20, 30, 40]

🔹 6. Arrays.equals(arr1, arr2)
📌 Description: Checks if two arrays are element-by-element equal.
 🧪 Example:
 int[] a = {1, 2, 3};
 int[] b = {1, 2, 3};
 System.out.println(Arrays.equals(a, b)); // Output: true

🔹 7. Arrays.deepEquals(arr1, arr2)
📌 Description: Checks equality for multi-dimensional arrays.
 🧪 Example:
 int[][] a = {{1, 2}, {3, 4}};
 int[][] b = {{1, 2}, {3, 4}};
 System.out.println(Arrays.deepEquals(a, b)); // Output: true

🔹 8. Arrays.fill(array, value)
📌 Description: Fills the entire array with the same value.
 🧪 Example:

 int[] arr = new int[4];
 Arrays.fill(arr, 7);
 System.out.println(Arrays.toString(arr)); // Output: [7, 7, 7, 7]

🔹 9. Arrays.binarySearch(array, key)
📌 Description: Searches for a key in a sorted array and returns the index.
 🧪 Example:
 int[] arr = {1, 3, 5, 7};
 int index = Arrays.binarySearch(arr, 5); 
 System.out.println(index); // Output: 2
